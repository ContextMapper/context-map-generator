import java.text.SimpleDateFormat

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.missedone:gradle-bintray-p2-plugin:1.2.0'
    }
}

plugins {
    id 'java'
    id 'jacoco'
    id 'maven-publish'
    id 'signing'
    id 'nebula.release' version '13.0.0'
}

apply plugin: 'org.standardout.bnd-platform'
apply plugin: 'bintray-p2'

group 'org.contextmapper'

sourceCompatibility = 1.8

if (!project.hasProperty('signing.secretKeyRingFile')) {
    project.ext.'signing.secretKeyRingFile' = "${rootDir}/secret-key.gpg"
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.apache.commons:commons-lang3:${commonsLangVersion}"
    implementation "guru.nidi.com.kitfox:svgSalamander:1.1.2"
    implementation "org.apache.commons:commons-exec:1.3"
    implementation "com.google.code.findbugs:jsr305:3.0.2"
    implementation "org.slf4j:slf4j-api:1.7.26"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${jUnitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${jUnitVersion}"
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
    required { gradle.taskGraph.hasTask("publishMavenJavaPublicationToMavenLocal") || gradle.taskGraph.hasTask("publishMavenJavaPublicationToMavenRepository") }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)

            artifactId = "${project.name}"
            groupId = "${project.group}"
            version = "${project.version}"
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }

            signArchives.signatures.each { signature ->
                artifact(signature) {
                    def matcher = signature.file =~ /-(sources|javadoc)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = signature.type
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "${ossReleaseStagingRepository}"
            def snapshotsRepoUrl = "${ossSnapshotRepository}"
            url = project.version.toString().endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            credentials {
                username = System.getenv('OSSRH_USERNAME')
                password = System.getenv('OSSRH_PASSWORD')
            }
        }
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'A graphical DDD Context Map generator on the basis of Graphviz'
            name 'Context Map Generator'
            url 'https://github.com/ContextMapper/context-map-generator'
            organization {
                name 'Context Mapper'
                url 'https://contextmapper.org/'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/ContextMapper/context-map-generator/issues'
            }
            licenses {
                license {
                    name 'Apache License 2.0'
                    url 'https://github.com/ContextMapper/context-map-generator/blob/master/LICENSE'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/ContextMapper/context-map-generator'
                connection 'scm:git:git://github.com/ContextMapper/context-map-generator.git'
                developerConnection 'scm:git:ssh://git@github.com:ContextMapper/context-map-generator.git'
            }
            developers {
                developer {
                    name 'Stefan Kapferer'
                    email 'stefan@contextmapper.org'
                }
            }
        }
    }
}

defaultTasks 'updateSiteZip'
updateSiteZip.dependsOn clean
build.finalizedBy(updateSiteZip)

platform {

    bundle "org.contextmapper:context-map-generator:${version}", {
        bnd {
            symbolicName = 'org.contextmapper.contextmap.generator'
            bundleName = 'context-map-generator'
            instruction 'Bundle-Vendor', 'Context Mapper'
            version = version
        }
        exclude module: 'slf4j-api'
        exclude module: 'jcl-over-slf4j'
        exclude module: 'jul-to-slf4j'
        exclude module: 'commons-logging'
    }

    featureId 'org.contextmapper.contextmap.generator.feature'
    featureName 'Context Map Generator'
    featureVersion project.version.toString().endsWith('SNAPSHOT') ? project.version.toString().replace("SNAPSHOT", "") + new SimpleDateFormat("YYYYMMddHHmmss").format(new Date()) : project.version.toString()
    featureProvider 'Context Mapper'

    categoryName 'Context Map Generator'
    categoryId 'org.contextmapper.contextmap.generator'

    useBndHashQualifiers false
    useFeatureHashQualifiers false
    defaultQualifier new SimpleDateFormat("YYYYMMddHHmmss").format(new Date())
}

publishP2Repo {
    repoOwner = 'contextmapper'
    repoName = project.version.toString().endsWith('SNAPSHOT') ? 'context-map-generator-snapshots' : 'context-map-generator-releases'
    mainFeatureId = 'org.contextmapper.contextmap.generator.feature'
    compositePackage = ''
    subCompositeStrategy = 'MICRO'
    apiKey = System.getenv('BINTRAY_API_KEY')
    user = System.getenv('BINTRAY_USERNAME')
}

publish.finalizedBy(publishP2Repo)

test {
    useJUnitPlatform()
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

check.dependsOn jacocoTestReport

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
}
